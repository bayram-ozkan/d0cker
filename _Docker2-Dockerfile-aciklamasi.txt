##########################################################
Dockerfile
##########################################################

FROM > Oluşturulacak imajın hangi imajdan oluşturulacağını belirten komuttur. Her Dockerfile de olması gereken tek kısımdır.
*
FROM ubuntu:18.04


####################################    
RUN > İmaj oluşturulurken shell’de bir komut çalıştırmak için bu komut kullanılır.. Örneğin apt-get install xxx ile xxx isimli uygulamanın bu imaja yüklenmesi sağlanabilir. 
*
RUN apt-get update


####################################
WORKDIR > cd xxx komutuyla ile istediğimiz klasöre geçmek yerine bu komutu kullanılarak istediğimiz klasöre geçer ve oradan çalışmaya devam ederiz. (Klasör yoksa oluşturur.)
*
WORKDIR /usr/src/app


####################################
COPY > İmaj içine dosya veya klasör kopyalamak için kullanırız
*
COPY /source /user/src/app


####################################
EXPOSE > Bu imajdan oluşturulacak containerların hangi portlar üstünden erişilebileceğini yani hangi portların yayınlanacağını bu komutla belirtebilirsiniz. 
*
EXPOSE 80/tcp 


####################################
CMD > Bu imajdan container yaratıldığı zaman varsayılan olarak çalıştırmasını istediğiniz komutu bu talimat ile belirlersiniz. 
*
CMD java merhaba


####################################
HEALTHCHECK > Bu talimat ile Docker'a bir konteynerin hala çalışıp çalışmadığını kontrol etmesini söylebiliriz. 
Docker varsayılan olarak container içerisinde çalışan ilk processi izler ve o çalıştığı sürece container çalışmaya devam eder. 
Fakat process çalışsa bile onun düzgün işlem yapıp yapmadığına bakmaz. HEALTHCHECK ile buna bakabilme imkanına kavuşuruz.
*
   
HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD curl -f http://localhost/ || exit 1

-start-period=5s: Konteynerin başlangıçtan itibaren sağlık kontrolüne başlanmadan önce 5 saniye beklenir. Bu, konteynerin tam olarak başlatılması için bir başlangıç süresi verir.


--interval=30s: Sağlık kontrolü komutunun her 30 saniyede bir çalıştırılacağını belirtir.

--timeout=10s: Sağlık kontrolü komutunun 10 saniye içinde tamamlanmazsa başarısız sayılacağını belirtir


--retries=3: Sağlık kontrolü başarısız olursa, Docker komutunu başarılı olana kadar 3 kez tekrarlar.

curl -f http://localhost/: curl komutu, http://localhost/ adresine bir HTTP GET isteği gönderir.
    -f bayrağı (--fail olarak da bilinir), 
    curl komutunun başarısız olması durumunda bir hata kodu döndürmesini sağlar. 
    Örneğin, eğer curl komutu 4xx veya 5xx HTTP durumu alırsa, bu hata olarak kabul edilir.

exit 1: Eğer curl komutu başarısız olursa (curl komutu bir hata kodu döndürürse), 
bu durumda exit 1 komutu çalıştırılır. Bu da Docker'a sağlık kontrolünün başarısız olduğunu bildirir.


####################################
LABEL > İmaj metadata’sına key=value şeklinde değer çiftleri eklemek için kullanılır. Örneğin team=development şeklinde bir 
etiket eklenerek bu imajın development ekibinin kullanması için yaratıldığı belirtilebilir.
*
LABEL version:1.0.8


####################################
USER > gireceğimiz komutları hangi kullanıcı ile çalıştırmasını istiyorsak bu talimat ile onu seçebiliriz. 
Ör: USER poweruser


####################################
ADD > COPY ile aynı işi yapar yani dosya ya da klasör kopyalarsınız. Fakat ADD bunun yanında dosya kaynağının bir url olmasına da izin verir.
Ayrıca ADD ile kaynak olarak bir .tar dosyası belirtilirse bu dosya imaja .tar olarak sıkıştırılmış haliyle değil de açılarak kopyalanır. 
*
ADD  https://wordpress.org/latest.tar.gz  /temp

Uzak bir sunucudan sıkıştırılmış dosyayı olduğu gibi aktarır. Sıkıştırılmış dosyayı açmaz


####################################
ENV > Imaj içinde environment variable tanımlamak için kullanılır
*
ENV TEMP_FOLDER="/temp"


####################################
ARG > ARG ile de variable tanımlarsınız. Fakat bu variable sadece imaj oluşturulurken yani build aşamasında kullanılır. Imajın oluşturulmuş 
halinde bu variable bulunmaz. ENV ile imaj oluşturulduktan sonra da imaj içinde olmasını istediğiniz variable tanımlarsınız, ARG ile sadece
oluştururken kullanmanız gereken variable tanımlarsınız.
*
ARG VERSION:1.0


####################################
VOLUME > Imaj içerisinde volume tanımlanamızı sağlayan talimat. Eğer bu volume host sistemde varsa container bunu kullanır. Yoksa yeni volume oluşturur. 
*
VOLUME /myvol


####################################
ENTRYPOINT > Bu talimat ile bir containerın çalıştırılabilir bir uygulama gibi ayarlanabilmesini sağlarsınız.
*
ENTRYPOINT ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]


####################################
SHELL > Dockerfile'ın komutları işleyeceği shell'in hangisi olduğunu belirtiriz. Linux için varsayılan shell ["/bin/sh", "-c"],Windows için ["cmd", "/S", "/C"]. Bunları SHELL talimatı ile değiştirebiliriz. 
*
SHELL ["powershell", "-command"]